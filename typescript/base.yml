# Copyright 2020 OpenStax Poland
# Licensed under the MIT license. See LICENSE file in the project root for
# full license text.

parser: '@typescript-eslint/parser'

extends:
  - ../base.yml
  - plugin:import/typescript
  - plugin:@typescript-eslint/recommended-type-checked

rules:
  # Require all overload signatures to be next to each other
  '@typescript-eslint/adjacent-overload-signatures': error

  # Warn when calling toString (including implicitly) on a value which is known
  # to produce useless output (eg. `"[object object]"`)
  '@typescript-eslint/no-base-to-string': warn

  # Forbid type assertions which may be mistaken for non-equality comparison:
  # `lhs! == rhs` vs `lhs !== rhs`
  '@typescript-eslint/no-confusing-non-null-assertion': error

  # Forbid use of the any type.
  '@typescript-eslint/no-explicit-any': warn

  # Require errors in promises to be handled.
  '@typescript-eslint/no-floating-promises': error

  # Forbid potential security vulnerabilities.
  '@typescript-eslint/no-implied-eval': error

  # Warn when using <T extends any> or <T extends unknown>.
  '@typescript-eslint/no-unnecessary-type-constraint': warn

  # Warn only because of false positives when using .bind
  '@typescript-eslint/no-unsafe-assignment': warn
  '@typescript-eslint/no-unsafe-argument': warn

  # Forbid `export {}` when it is not needed to turn a file into a module
  '@typescript-eslint/no-useless-empty-export': error

  # Only allow instances of Error to be thrown.
  '@typescript-eslint/no-throw-literal': error

  # Prefer TS 3.7's nullish coalescing operator (`??`) over logical OR (`||`).
  #
  # Warn only because it has too many false-positives.
  '@typescript-eslint/prefer-nullish-coalescing': warn

  # Require calls to Array#sort to provide a comparator function.
  '@typescript-eslint/require-array-sort-compare': error

  # Require switch statements to cover all possible cases.
  '@typescript-eslint/switch-exhaustiveness-check': error

  # Warn when two or more overloads could be unified into a single function
  # using a union, an optional, or a rest parameter.
  '@typescript-eslint/unified-signatures': warn

  # ----------------------------------------------------------------------------
  # Following are typescript-eslint's “extension” rules, which modify default
  # eslint rules. Remember to update these when changing ../base.yml.

  # Enforces default case even when it's provable not necessary. Exhaustiveness
  # of switch statements is also now enforced by
  # @typescript-eslint/switch-exhaustiveness-check.
  default-case: off

  # Force all default parameters to come last.
  default-param-last: off
  '@typescript-eslint/default-param-last': error

  # Handled by TS itself
  import/named: off

  # Warn against using empty functions.
  #
  # Empty functions can be confusing and can be a mistake (e.g. () => {} returns
  # undefined, not an empty object). In case when you do intentionally want to
  # use an empty function, disable this rule with
  #
  #   /* eslint-disable-next-line @typescript-eslint/no-empty-function */
  #
  # and describe why are you using an empty function.
  no-empty-function: off
  '@typescript-eslint/no-empty-function': warn

  # Warn against constructing functions in loops.
  no-loop-func: off
  '@typescript-eslint/no-loop-func': warn

  # Unused expressions often indicate a logic error.
  no-unused-expressions: off
  '@typescript-eslint/no-unused-expressions': error

  # Forbid unused variables, except when used in a
  # `const { var, ...rest } = expr` to exclude some names from an object
  no-unused-vars: off
  '@typescript-eslint/no-unused-vars':
    - error
    - ignoreRestSiblings: true

  # Forbid use of names before they are defined, except at the top level.
  no-use-before-define: off
  '@typescript-eslint/no-use-before-define':
    - error
    - functions: false
      classes: false
      variables: false
      typedefs: false

  # Forbid empty constructors.
  no-useless-constructor: off
  '@typescript-eslint/no-useless-constructor': error

  # Require that each async function have an await expression.
  require-await: off
  '@typescript-eslint/require-await': error
