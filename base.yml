# Copyright 2023 OpenStax Poland
# Licensed under the MIT license. See LICENSE file in the project root for
# full license text.

# Enforce best practices and protect against common mistakes.
#
# This configuration contains a few rules which could be considered stylistic.
# In those cases the reason for their inclusion is stated in the comment.

# Use ES6 everywhere.
env:
  es6: true
parserOptions:
  sourceType: module
  ecmaVersion: 2018

# Use ESLint's recommendations. Remember to review changes to them when
# upgrading ESLint.
extends: eslint:recommended

# Report eslint-disable comments which don't do anything.
reportUnusedDisableDirectives: true

plugins:
  - import

settings:
  # Consider PnP-installed modules as external
  import/external-module-folders: ["node_modules", ".yarn"]

rules:
  # Check that for each setter there is a corresponding getter.
  accessor-pairs: warn

  # Require consistent use of line breaks in array expressions.
  array-bracket-newline: [error, consistent]
  array-element-newline: [error, consistent]

  # There should be no spaces between array brackets and its content.
  array-bracket-spacing: error

  # Forbid braces around an arrow function's body unless necessary.
  arrow-body-style: error

  # Forbid parentheses in arrow functions with a single argument.
  arrow-parens: [error, as-needed]

  # Require a space before and after the arrow token.
  arrow-spacing: error

  # Require consistent use of line breaks in object expressions.
  block-spacing: error

  # Use the “One True Brace Style”
  brace-style: error

  # Require dangling comma in multi-line expressions.
  comma-dangle: [error, always-multiline]

  # Single space after a comma, no spaces before.
  comma-spacing: error

  # No spaces inside computed property brackets.
  computed-property-spacing: error

  # Ensure return statements are used consistently with or without a value.
  consistent-return: error

  # Require curly braces only around multiline bodies, and require that they
  # be used consistently across branches.
  curly: [error, multi-line, consistent]

  # Require default case to be present in each switch statement.
  default-case: error

  # Force all default parameters to come last.
  default-param-last: error

  # In a multiline property access the dot operator attaches to property name.
  dot-location: [error, property]

  # Require that properties be accessed via the dot operator when possible.
  dot-notation: error

  # Only use type-safe equality operators.
  eqeqeq: [error, smart]

  # Require empty line at end of file.
  eol-last: error

  # There is no spacing between function name and opening parenthesis.
  func-call-spacing: error

  # Require all functions to have a name.
  #
  # When an error is thrown in an anonymous function, it will be described in
  # the stack trace just as an “anonymous function”, which makes debugging more
  # difficult (especially when there are multiple such functions).
  func-names: error

  # Require consistent use of newlines between function call arguments.
  function-call-argument-newline: [error, consistent]

  # In generator functions star is placed next to the function token and there
  # is a space between star and functions name. In generator methods star
  # is placed next to the method name.
  generator-star-spacing:
    - error
    - anonymous: neither
      method: before

  # When using arrow functions with implicit return (without braces) the value
  # must be placed on the same line as arrow token.
  implicit-arrow-linebreak: error

  # Detect mistakes in exporting, such as repeated exports, duplicate names,
  # or multiple defaults.
  import/export: error

  # Import paths shouldn't use extensions when importing JavaScript modules,
  # and should use extensions in all other cases.
  import/extensions:
    - error
    - always
    - js: never
      jsx: never
      ts: never
      tsx: never

  # Import statements must precede other statements.
  import/first: error

  # Forbid imports of names which don't exist in imported modules
  import/named: error

  # Enforce an empty line after last import statement.
  import/newline-after-import:
    - error
    - considerComments: true

  # Forbid imports from absolute paths (beginning with / on unix-compatible
  # systems or with a drive letter on windows).
  import/no-absolute-path: error

  # Require all default exports to be named
  import/no-anonymous-default-export:
    - error
    - allowCallExpression: false

  # Forbid use of the commonjs module system if it can be replaced with ES5
  # import/export statements
  import/no-commonjs: error

  # Forbid duplicate imports
  no-duplicate-imports: off
  import/no-duplicates: error

  # Forbid import {} from '..'
  import/no-empty-named-blocks: error

  # Forbid imports of dependencies not declared in package.json.
  import/no-extraneous-dependencies: error

  # Forbid use of module.exports in ES5 modules
  import/no-import-module-exports: error

  # Prefer import name over import { default as name }.
  import/no-named-default: error

  # Forbid a module from importing itself.
  import/no-self-import: error

  # Use as simple import paths as possible.
  import/no-useless-path-segments: error

  import/order:
    - error
    - newlines-between: always
      groups:
        - ["builtin", "external", "unknown"]
        - ["internal", "parent", "sibling", "index"]

  sort-imports:
    - error
    - ignoreCase: true
      ignoreDeclarationSort: true

  # Use four spaces indentation.
  indent:
    - error
    - 4
      # Align subsequent variables in a declaration to the first
    - VariableDeclarator: first
      ignoredNodes:
      # Conflicts with react/jsx-closing-bracket-location.
      - JSXOpeningElement

  # No spaces before colon, one space after colon.
  key-spacing: error

  # Single space at either end of a keyword.
  keyword-spacing: error

  # Use Unix style line breaks.
  linebreak-style: error

  # Require spacing between class members.
  lines-between-class-members: error

  # Limit line width to 80 columns.
  max-len:
    - error
    - code: 100
      comments: 80

  # Allow at most one statement per line.
  max-statements-per-line: error

  # Use sequences of line comments for multi-line comments
  multiline-comment-style: [error, separate-lines]

  # Require condition and each of the operands of a ternary expression to either
  # be in a single line or each in a separate line.
  multiline-ternary: [error, always-multiline]

  # Require parentheses in new expressions.
  new-parens: error

  # Require each chained call (for chains longer than 3) to be on a separate
  # line.
  newline-per-chained-call: error

  # Forbid use of alert().
  no-alert: error

  # Forbid use of deprecated features.
  no-caller: error
  no-iterator: error
  no-octal-escape: error
  no-proto: error

  # Forbid potential security vulnerabilities.
  no-eval: error
  no-implied-eval: error
  no-script-url: error

  # Prefer array literal over array constructor.
  no-array-constructor: error

  # Forbid use of console, except for logging problems.
  no-console:
    - error
    - allow: [warn, error]

  # Forbid else { return }
  no-else-return: error

  # Warn against using empty functions.
  #
  # Empty functions can be confusing and can be a mistake (e.g. () => {} returns
  # undefined, not an empty object). In case when you do intentionally want to
  # use an empty function, disable this rule with
  #
  #   /* eslint-disable-next-line no-empty-function */
  #
  # and describe why are you using an empty function.
  no-empty-function: warn

  # Forbid extending prototypes of build-in objects.
  no-extend-native: error

  # Forbid unnecessary function binding.
  no-extra-bind: error

  # Forbid unnecessary labels.
  no-extra-label: error

  # Forbid extra parenthesis, except when used to make things clearer.
  no-extra-parens:
    - error
    - all
    - nestedBinaryExpressions: false

  # Forbid implicit type coercion
  no-implicit-coercion: error

  # Imported names are declared as read-only, and reassigning them causes
  # a runtime error.
  no-import-assign: error

  # Forbid unnecessary use of blocks.
  no-lone-blocks: error

  # Forbid else blocks with a single if clause. Use else if instead.
  no-lonely-if: error

  # Warn against constructing functions in loops.
  no-loop-func: warn

  # Forbid mixing of operators with the same precedence.
  no-mixed-operators: error

  # Forbid sequences of multiple spaces.
  #
  # Multiple spaces are usually inserted by mistake, and are a common source of
  # diff noise.
  no-multi-spaces: warn

  # Forbid consecutive empty lines.
  no-multiple-empty-lines: error

  # Forbid use of new for side effects.
  no-new: error

  # Forbid use of the Function constructor.
  no-new-func: error

  # Prefer object literal over object constructor.
  no-new-object: error

  # Forbid use of new Wrapper for primitive type wrappers.
  no-new-wrappers: error

  # Forbid initializing variables to undefined.
  no-undef-init: error

  # Forbid loops in which loop condition never changes.
  no-unmodified-loop-condition: error

  # Forbid ternary operator when simpler alternatives exist.
  no-unneeded-ternary: error

  # Unused expressions often indicate a logic error.
  no-unused-expressions: error

  # Forbid unused variables, except when used in a
  # `const { var, ...rest } = expr` to exclude some names from an object
  no-unused-vars:
    - error
    - ignoreRestSiblings: true

  # Forbid use of names before they are defined, except at the top level.
  no-use-before-define:
    - error
    - functions: false
      classes: false
      variables: false

  # Forbid uses of .call and .apply when not necessary.
  no-useless-call: error

  # Forbid computed key with a literal.
  no-useless-computed-key: error

  # Forbid empty constructors.
  no-useless-constructor: error

  # Forbid renaming to the same name.
  no-useless-rename: error

  # Forbid return statements which have no effect on control flow.
  no-useless-return: error

  # Forbid assignment in return statements.
  no-return-assign: error

  # Forbid await expressions in return statements.
  no-return-await: error

  # Forbid comparing a value against itself.
  no-self-compare: error

  # Forbid use of the comma operator.
  no-sequences: error

  # Forbid use of the tab character.
  no-tabs: error

  # Only allow instances of Error to be thrown.
  no-throw-literal: error

  # Forbid tailing whitespace.
  #
  # Tailing whitespace often gets introduced by accident when editing (since it
  # usually not displayed or marked in any way), and is a common source of diff
  # noise.
  no-trailing-spaces: error

  # Forbid use of the var keyword.
  no-var: error

  # There should be no spaces around the dot operator, except indentation.
  no-whitespace-before-property: error

  # Require consistent use of line breaks in object expressions.
  object-curly-newline:
    - error
    - multiline: true
      consistent: true
  object-curly-spacing: [error, always]

  # Require use of object shorthand syntax.
  object-shorthand: error

  # Only allow one variable declaration per line when they are initialized.
  one-var-declaration-per-line: error

  # In multiline binary expressions operator is always at the beginning of
  # a line.
  operator-linebreak: [error, before]

  # Disallow “block padding”
  padded-blocks: [error, never]

  # Prefer arrow functions over function expressions as callbacks.
  prefer-arrow-callback: error

  # Variables which are never assigned should be declared const.
  prefer-const:
    - error
    - destructuring: all

  # Prefer numeric literals over Number.parseInt.
  prefer-numeric-literals: error

  # Prefer object spread syntax over Object.assign
  prefer-object-spread: error

  # Forbid non-Error values as arguments to Promise.reject().
  prefer-promise-reject-errors: error

  # Disallow constructing RegExp from a string literal.
  prefer-regex-literals: error

  # Prefer arguments spread over the arguments variable.
  prefer-rest-params: error

  # Prefer argument spread over calling .apply()
  prefer-spread: error

  # Forbid spaces between the rest operator and its argument.
  rest-spread-spacing: error

  # Only quote properties when needed.
  quote-props: [error, as-needed]

  # Only use semicolons where they would not be inserted by ASI. In those places
  # semicolon goes at the start of a line.
  semi:
    - error
    - never
    - beforeStatementContinuationChars: always
  semi-style: [error, first]

  # There should always be a space before a block's opening brace.
  space-before-blocks: error

  # Forbid spaces before the left parenthesis opening a function's parameter
  # list, except for async arrow functions, where it's required.
  space-before-function-paren:
    - error
    - anonymous: never
      named: never

  # Forbid spaces within parentheses.
  space-in-parens: error

  # Disable until we can use PEP8-style spacing for default arguments.
  # space-infix-ops: error

  # Require spaces around word prefix operators (new, void, etc.), and a space
  # before and no spaces after non-word prefix operators.
  space-unary-ops: error

  # Require a space after the initial //, /*, or /** of a comment.
  spaced-comment: error

  # Require space after case colon, and no spaces before it.
  switch-colon-spacing: error

  # Forbid spaces between template literal and its tag.
  template-tag-spacing: error

  # Forbid Unicode BOM.
  unicode-bom: error

  # Require that each async function have an await expression.
  require-await: error

  # Require that each generator function have an await expression.
  require-yield: error

  # There are no spaces between yield and star, and there is space between star
  # and argument.
  yield-star-spacing: error
